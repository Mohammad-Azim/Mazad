using Application.Features.Bids.Dtos;
using AutoMapper;
using AutoMapper.QueryableExtensions;
using Application.Context;
using MediatR;
using Microsoft.EntityFrameworkCore;

namespace Application.Features.Bids.Queries.BidListByProduct
{
    public record GetBidListByProductQuery : IRequest<GetListBidByProductQueryResponse>
    {
        public int Id { get; set; }
    }

    public class GetListBidByProductQueryHandler : IRequestHandler<GetBidListByProductQuery, GetListBidByProductQueryResponse>
    {
        private readonly ApplicationDbContext _context;
        private readonly IGetListBidByProductQueryResponse _response;

        private readonly IMapper _mapper;

        public GetListBidByProductQueryHandler(ApplicationDbContext context, IGetListBidByProductQueryResponse response, IMapper mapper)
        {
            _context = context;
            _response = response;
            _mapper = mapper;
        }
        public async Task<GetListBidByProductQueryResponse> Handle(GetBidListByProductQuery request, CancellationToken cancellationToken)
        {

            var product = await _context.Products.FirstOrDefaultAsync(x => x.Id == request.Id, cancellationToken);

            if (product != null)
            {
                var listBids = await _context.Bids.AsQueryable().ProjectTo<BidDto>(_mapper.ConfigurationProvider).Where(b => b.ProductId == product.Id).ToListAsync(cancellationToken);

                _response.SuccessResponse(listBids);
            }
            else
            {
                _response.NotFoundResponse();
            }

            return (GetListBidByProductQueryResponse)_response;
        }
    }
}
// #??#
//                 var listBids = product.Bids;

// var listBids = product.Bids.AsQueryable().ProjectTo<BidDto>(_mapper.ConfigurationProvider).ToList();


// await _context.Entry(product).Collection(b => b.Bids.AsQueryable().ProjectTo<BidDto>(_mapper.ConfigurationProvider).ToList()).LoadAsync(cancellationToken);


//var listBids = product.Bids.AsQueryable().ProjectTo<BidDto>(_mapper.ConfigurationProvider).ToList();

// await _context.Entry(product).Collection(p => p.Bids).LoadAsync(cancellationToken);
// var listBids = product.Bids.Select(b => new BidDto
// {
//     BidPrice = b.BidPrice,
//     Date = b.Date,
//     UserId = b.UserId
// }).ToList();

//var listBids = await _context.Bids.AsQueryable().ProjectTo<BidDto>(_mapper.ConfigurationProvider).Where(b => b.ProductId == product.Id).ToListAsync(cancellationToken);
// Includes garbage generated by the worker function.
